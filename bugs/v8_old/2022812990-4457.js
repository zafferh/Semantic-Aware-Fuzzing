const v0 = RegExp();
const v1 = v0.test("asdf");
function v2(){
if(! v1){
(v2) = new Array(1, 2, 3);
(this[2]) = v2;
}
(v1) = true;
return ({});
}
var v3 = v2.toString().match(v0);
// GenBlkBrick
for(let v0 = 0;(v0) < (200000);v0++){
({m : (function (){
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
v0;
})});
function v4(v1){
var v2 = [];
(v2.length) = v2[0];
var v3 = (function (){
});
var v4 = Array.prototype.push.call(v2, 42, 43);
(function (){
v4;
})(new Boolean(false));
}
}
if((v3) !== (null)){
let v1 = 'a'.localeCompare(v3);
}
function v5(){
let v1 = [];
for(let v2 = 0;(v2) < (10000);v2++){
(v2.prototype) = ({});
v4(v1);
}
(v2.prototype) = v1;
v4(v1);
print(v1);
}
if(v1){
const v1 = new v5(v4);
const v4 = new Float32Array(40183);
for(const v6 of v4){
}
}
